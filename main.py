import asyncio
import os
import yt_dlp
import requests
from collections import deque
from typing import Deque, Tuple
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
YANDEX_TOKEN = "YOUR_YANDEX_DISK_TOKEN"
YANDEX_UPLOAD_DIR = "/YouTubeDownloads"
TEMP_DIR = "tmp_downloads"
LOG_FILE = "upload_log.txt"

os.makedirs(TEMP_DIR, exist_ok=True)

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)

user_task_queue: Deque[Tuple[int, str]] = deque()
is_processing = False

# ==== –ö–õ–ê–°–° –ü–†–û–ì–†–ï–°–°–ê ====


class ProgressTracker:
    def __init__(self, message: Message):
        self.message = message
        self.last_percent = 0

    async def progress_hook(self, d):
        if d['status'] == 'downloading':
            percent = float(
                d.get('_percent_str', '0').strip().replace('%', ''))
            if int(percent) - self.last_percent >= 5:
                self.last_percent = int(percent)
                await self.message.edit_text(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶ {self.last_percent}%")
        elif d['status'] == 'finished':
            await self.message.edit_text("üì¶ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–≥—Ä—É–∂–∞—é –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫‚Ä¶")


# ==== –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û ====
async def download_video_with_progress(url: str, tracker: ProgressTracker) -> str:
    output_template = os.path.join(TEMP_DIR, '%(title).200s.%(ext)s')
    ydl_opts = {
        'format': 'bestvideo+bestaudio/best',
        'merge_output_format': 'mp4',
        'outtmpl': output_template,
        'noplaylist': True,
        'progress_hooks': [tracker.progress_hook],
        'quiet': True,
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
        return ydl.prepare_filename(info)


# ==== –Ø–ù–î–ï–ö–° –î–ò–°–ö ====
def upload_to_yandex_disk(local_file_path: str, yandex_path: str) -> bool:
    upload_url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    params = {"path": yandex_path, "overwrite": "true"}
    response = requests.get(upload_url, headers=headers, params=params)
    if response.status_code != 200:
        return False
    with open(local_file_path, "rb") as f:
        upload_response = requests.put(
            response.json()['href'], files={'file': f})
    return upload_response.status_code == 201


def get_public_link(yandex_path: str) -> str | None:
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    requests.put("https://cloud-api.yandex.net/v1/disk/resources/publish",
                 headers=headers, params={"path": yandex_path})
    res = requests.get("https://cloud-api.yandex.net/v1/disk/resources",
                       headers=headers, params={"path": yandex_path})
    if res.status_code == 200:
        return res.json().get("public_url")
    return None


def log_event(user_id: int, message: str):
    with open(LOG_FILE, "a") as f:
        f.write(f"[{datetime.now()}] User {user_id}: {message}\n")


# ==== –û–ë–†–ê–ë–û–¢–ö–ê –û–ß–ï–†–ï–î–ò ====
async def process_queue():
    global is_processing
    if is_processing or not user_task_queue:
        return

    is_processing = True
    while user_task_queue:
        user_id, url = user_task_queue.popleft()
        try:
            status_msg = await bot.send_message(user_id, f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å: {url}")
            tracker = ProgressTracker(status_msg)
            filename = await download_video_with_progress(url, tracker)

            file_name_only = os.path.basename(filename)
            yandex_path = f"{YANDEX_UPLOAD_DIR}/{file_name_only}"

            success = upload_to_yandex_disk(filename, yandex_path)

            if success:
                public_link = get_public_link(yandex_path)
                if public_link:
                    await bot.send_message(user_id, f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:\n<b>{file_name_only}</b>\nüîó <a href='{public_link}'>–°–∫–∞—á–∞—Ç—å</a>")
                    log_event(user_id, f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {public_link}")
                else:
                    await bot.send_message(user_id, f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.")
                    log_event(user_id, f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–æ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏: {filename}")
            else:
                await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
                log_event(
                    user_id, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {filename}")

            os.remove(filename)

        except Exception as e:
            await bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏:\n<code>{str(e)}</code>")
            log_event(user_id, f"–û—à–∏–±–∫–∞: {str(e)}")

    is_processing = False


# ==== –•–≠–ù–î–õ–ï–†–´ ====
@router.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ, –∏ —è –∑–∞–≥—Ä—É–∂—É –µ–≥–æ –≤ —Ç–≤–æ–π –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")


@router.message(Command("queue"))
async def queue_status(message: Message):
    user_id = message.chat.id
    if not user_task_queue:
        await message.answer("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return
    total = len(user_task_queue)
    positions = [i + 1 for i,
                 (uid, _) in enumerate(user_task_queue) if uid == user_id]
    if positions:
        pos_list = ', '.join(map(str, positions))
        await message.answer(f"üìä –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{total}</b>\nüßç‚Äç‚ôÇÔ∏è –í—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏—è—Ö: {pos_list}")
    else:
        await message.answer(f"üìä –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{total}</b>\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")


@router.message(Command("cancel"))
async def cancel_user_tasks(message: Message):
    user_id = message.chat.id
    before = len(user_task_queue)
    user_task_queue_copy = deque(
        [item for item in user_task_queue if item[0] != user_id])
    removed = before - len(user_task_queue_copy)
    user_task_queue.clear()
    user_task_queue.extend(user_task_queue_copy)
    await message.answer(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {removed}")
    log_event(user_id, f"–û—Ç–º–µ–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {removed}")


@router.message(F.text.startswith("http"))
async def handle_youtube_link(message: Message):
    url = message.text.strip()
    user_task_queue.append((message.chat.id, url))
    await message.answer("üì• –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. –û–∂–∏–¥–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é.")
    log_event(message.chat.id, f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {url}")
    await process_queue()


# ==== –ó–ê–ü–£–°–ö ====
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
